#!/bin/bash

set -e

# shellcheck source=src/kube-utils
source "$(dirname "$0")/kube-utils"

Usage=$(cat <<EOF
Usage: kube-tools install <Target> <Version> [Options]

Targets
    master
    worker

    kubeadm
    kubelet
    kubectl

    crictl
    calicoctl
    cni-plugins

    images-master
    images-worker

    templates-<Component>

Options
    --arch=<Architecture>
    --templates-<Component>=<Templates>

Components
    kubeadm
    calico
    multus-cni
    vxlan-controller
    kubealived
    user-admin-crb
EOF
)

function main {
    if [ "$#" -lt 3 ]; then stop "${Usage}"; fi

    local Command="$1"
    local Target="$2"
    local Version="$3"
    local TemplateName="${Target#templates-}"
    local Arch=amd64
    local Templates

    shift 3
    local Arg
    for Arg in "$@"; do
        case "${Arg}" in
            --arch=*) Arch="${Arg#*=}" ;;
            --templates-*=*) Templates="${Templates} ${Arg#--templates-}" ;;
            *) stop unknown-option "${Arg}" ;;
        esac
    done

    local StartTime; StartTime="$(start_time)"
    case "${Command} ${Target}" in
        "install master"|\
        "install images-master")
            install_"${Target//-/_}" "${Version}" \
                                     "${Templates}" \
                                     "${Arch}" ;;
        "install worker"|\
        "install images-worker")
            install_"${Target//-/_}" "${Version}" \
                                     "${Templates}" \
                                     "${Arch}" ;;
        "install kubeadm"|\
        "install kubelet"|\
        "install kubectl"|\
        "install crictl"|\
        "install calicoctl"|\
        "install cni-plugins")
            install_"${Target//-/_}" "${Version}" "${Arch}"
        ;;
        "install templates-${TemplateName}")
            install_templates "$(templates "${TemplateName}" "${Templates}")"
        ;;
        *) stop "${Usage}" ;;
    esac
    show_completion_time "${StartTime}"
}

function kube_tools_binaries {
    local Version="$1"
    local Arch="$2"
    printf %b "https://storage.googleapis.com/kubernetes-release/release/" \
              "${Version}/bin/linux/${Arch}"
}
function kube_tools_configs {
    local Version="$1"
    printf %b "https://raw.githubusercontent.com/kubernetes/kubernetes/" \
              "${Version}/build/debs"
}
function crictl_archive {
    local Version="$1"
    local Arch="$2"
    printf %b "https://github.com/kubernetes-incubator/cri-tools/" \
              "releases/download/${Version}/" \
              "crictl-${Version}-linux-${Arch}.tar.gz"
}
function calicoctl_binary {
    local VERSION="$1"
    printf %b "https://github.com/projectcalico/calicoctl/" \
              "releases/download/${VERSION}/calicoctl"
}
function cni_plugins_archive {
    local Version="$1"
    local Arch="$2"
    printf %b "https://github.com/containernetworking/plugins/" \
              "releases/download/${Version}/" \
              "cni-plugins-${Arch}-${Version}.tgz"
}
function templates {
    local Name="$1"
    local Templates="$2"

    local Manifests; Manifests="$(printf %b \
        "https://raw.githubusercontent.com/travelping/cennsonic" \
        "/master/manifests" \
    )"

    case "${Name}" in
        kubeadm*) template "${Name}" "${Templates}" \
            "$(printf %b "${Manifests}/config/${Name}.yaml")"
        ;;
        calico) template "${Name}" "${Templates}" \
            "$(printf %b " ${Manifests}/network/calico-etcd.yaml" \
                         " ${Manifests}/network/calico-etcd-rbac.yaml" \
                         " ${Manifests}/network/calico-etcd-config.yaml" \
                         " ${Manifests}/network/calico-etcd-sync.yaml")" \
#                        " ${Manifests}/network/calico-kdd.yaml" \
#                        " ${Manifests}/network/calico-kdd-rbac.yaml")"
        ;;
        multus-cni) template "${Name}" "${Templates}" \
            "$(printf %b " ${Manifests}/network/multus-cni.yaml" \
                         " ${Manifests}/network/multus-cni-rbac.yaml" \
                         " ${Manifests}/network/multus-cni-config.yaml")"
        ;;
        vxlan-controller) template "${Name}" "${Templates}" \
            "$(printf %b " ${Manifests}/network/kube-vxlan-controller.yaml")"
        ;;
        kubealived) template "${Name}" "${Templates}" \
            "$(printf %b "${Manifests}/network/kubealived.yaml")"
        ;;
        user-admin-crb) template "${Name}" "${Templates}" \
            "$(printf %b "${Manifests}/users/user-admin-crb.yaml")"
        ;;
    esac
}
function template {
    local Name="$1"
    local Templates; read -r -a Templates <<< "${2//;/ }"
    local Default="$3"

    local Template
    for Template in "${Templates[@]}"; do
        local TemplateName="${Template%%=*}"
        local TemplateFiles="${Template#*=}"

        if [ "${Name}" = "${TemplateName}" ]; then
            echo "${TemplateFiles//,/ }"
            return
        fi
    done

    echo "${Default}"
}
function master_images {
    local KubernetesVersion="$1"
    local Templates="$2"
    local Arch="$3"

    /opt/bin/kubeadm config images list \
        --kubernetes-version "${KubernetesVersion}"

    template_images kubealived "${Templates}"
}
function worker_images {
    local KubernetesVersion="$1"
    local Templates="$2"
    local Arch="$3"

    /opt/bin/kubeadm config images list \
                     --kubernetes-version "${KubernetesVersion}" \
        |
        grep -E "kube-proxy|pause|coredns"

}
function template_images {
    local Name="$1"
    local Templates="$2"

    local Template
    for Template in $(templates "${Name}" "${Templates}"); do
        read_template "${Template}"
    done | grep image: | sort -u | sed "s/.*: //"
}

function install_master {
    local KubernetesVersion="$1"
    local Templates="$2"
    local Arch="$3"

    install_kubeadm "${KubernetesVersion}" "${Arch}"
    install_kubelet "${KubernetesVersion}" "${Arch}"
    install_kubectl "${KubernetesVersion}" "${Arch}"
    install_images master "${KubernetesVersion}" "${Templates}" "${Arch}"

    case "$(k8s_version)" in
        v1.12.*) local Kubeadm="kubeadm-v1alpha3" ;;
        v1.13.*|\
        v1.14.*) local Kubeadm="kubeadm-v1beta1" ;;
    esac

    install_templates "$(templates "${Kubeadm}" "${Templates}")" \
                      "$(templates kubealived "${Templates}")" \
                      "$(templates user-admin-crb "${Templates}")"

    enable_service docker kubelet
}
function install_worker {
    local KubernetesVersion="$1"
    local Templates="$2"
    local Arch="$3"

    install_kubeadm "${KubernetesVersion}" "${Arch}"
    install_kubelet "${KubernetesVersion}" "${Arch}"
    install_kubectl "${KubernetesVersion}" "${Arch}"
    install_images worker "${KubernetesVersion}" "${Templates}" "${Arch}"

    enable_service docker kubelet
}

function install_kubeadm {
    local Version="$1"
    local Arch="$2"

    log "Installing kubeadm ${Version} ${Arch}..."
    install_binary "$(kube_tools_binaries "${Version}" "${Arch}")/kubeadm"
    install_config "$(kube_tools_configs "${Version}")/10-kubeadm.conf" \
                    /etc/systemd/system/kubelet.service.d 644
}
function install_kubelet {
    local Version="$1"
    local Arch="$2"

    log "Installing kubelet ${Version} ${Arch}..."
    install_binary "$(kube_tools_binaries "${Version}" "${Arch}")/kubelet"
    install_config "$(kube_tools_configs "${Version}")/kubelet.service" \
                    /etc/systemd/system 444
}
function install_kubectl {
    local Version="$1"
    local Arch="$2"

    log "Installing kubectl ${Version} ${Arch}..."
    install_binary "$(kube_tools_binaries "${Version}" "${Arch}")/kubectl"
}
function install_crictl {
    local Version="$1"
    local Arch="$2"

    log "Installing crictl ${Version} ${Arch}..."
    install_binary_archive "$(crictl_archive "${Version}" "${Arch}")"
}
function install_calicoctl {
    local Version="$1"

    log "Installing calicoctl ${Version}..."
    install_binary "$(calicoctl_binary "${Version}")"
}
function install_cni_plugins {
    local Version="$1"
    local Arch="$2"

    log "Installing CNI plugins ${Version} ${Arch}..."
    install_binary_archive "$(cni_plugins_archive "${Version}" "${Arch}")" \
                           /opt/cni/bin
}
function install_images_master {
    install_images master "$@"
}
function install_images_worker {
    install_images worker "$@"
}
function install_images {
    local NodeType="$1"
    shift

    log "Pulling ${NodeType} images..."

    local Image
    for Image in $("${NodeType}_images" "$@"); do
        docker pull "${Image}"
    done
}

function file_digest {
    local HashFun="$1"
    local FileName="$2"
    openssl "${HashFun}" "${FileName}" | sed "s/.*= //"
}
function install_binary {
    local Url="$1"
    local Dest="${2:-/opt/bin}"
    local Binary; Binary=$(basename "${Url}")
    local RemoteDigest
    local LocalDigest
    local HashFun="sha1"

    RemoteDigest="$(curl -L "${Url}.${HashFun}")"
    if [ -e "${Dest}/${Binary}" ]; then
        LocalDigest="$(file_digest "${HashFun}" "${Dest}/${Binary}")"
    fi

    if [ "${LocalDigest}" != "${RemoteDigest}" ]; then
        curl -LO "${Url}"
        sudo mkdir -p "${Dest}"
        sudo install "${Binary}" "${Dest}" && rm "${Binary}"
    fi

    echo "Digest: ${HashFun}:$(file_digest sha1 "${Dest}/${Binary}")"
}
function install_binary_archive {
    local Url="$1"
    local Dest="${2:-/opt/bin}"
    local TmpDir; TmpDir=$(basename "${Url}")

    mkdir -p "${TmpDir}"
    curl -L "${Url}" | tar -C "${TmpDir}" -xz
    sudo mkdir -p "${Dest}"
    sudo install "$(find "${TmpDir}" -type f)" "${Dest}"
    rm "$(find "${TmpDir}" -type f)"
    rmdir "${TmpDir}"
}
function install_config {
    local Url="$1"
    local Dest="$2"
    local Mode="$3"
    local Config; Config=$(basename "${Url}")

    sudo mkdir -p "${Dest}"
    curl -sL "${Url}" | sed "s:/usr/bin:/opt/bin:g" | \
                        sudo tee "${Dest}/${Config}" > /dev/null
    sudo chmod "${Mode}" "${Dest}/${Config}"
}
function install_templates {
    local FileNames=$*
    local TemplatesDir="/etc/kubernetes/templates"

    sudo mkdir -m 700 -p "${TemplatesDir}"

    local FileName
    for FileName in ${FileNames}; do
        local BaseName; BaseName="$(basename "${FileName}")"

        log "Installing ${FileName} as ${BaseName}..."
        read_template "${FileName}" |
            sudo tee "${TemplatesDir}/${BaseName}" > /dev/null
        sudo chmod 600 "${TemplatesDir}/${BaseName}"
    done
}
function read_template {
    local Template="$1"

    if [ -e "${Template}" ]; then cat "${Template}"; return; fi
    curl -sL "${Template}"
}

function enable_service {
    local Services="$*"

    local Service
    for Service in ${Services}; do
        log "Enabling ${Service}..."
        sudo systemctl enable "${Service}"
    done
}

main "$@"
