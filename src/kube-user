#!/bin/bash

set -e

# shellcheck source=src/kube-utils
source "$(dirname "$0")/kube-utils"

Usage=$(cat <<EOF
Usage: kube-user <Action> <Username> [Options]

Actions
    create
    delete

Options
    -a, --admin
    -c, --company=<Company>
    -d, --days=<Days>
    -s, --server=<Server>
    -p, --port=<Port>
    -C, --cluster=<Cluster Name>
        --ca-cert=<CA Cert Path>
        --ca-cert-key=<CA Cert Key Path>
EOF
)

function main {
    if [ "$#" -lt 2 ]; then stop "${Usage}"; fi

    case "$1 $2" in
        "create $2"|\
        "delete $2")
            local Action="$1"
            local UserName="$2"

            shift 2
            "${Action}_user" "${UserName}" "$@"
        ;;
        *) stop "${Usage}" ;;
    esac
}

function ca_cert {
    echo "/etc/kubernetes/pki/ca.crt"
}
function ca_cert_key {
    echo "/etc/kubernetes/pki/ca.key"
}
function templates {
    echo "/etc/kubernetes/templates"
}
function kubectl {
    sudo -H /opt/bin/kubectl --kubeconfig /etc/kubernetes/admin.conf "$@"
}

function create_user {
    local UserName="$1"
    shift

    local Arg
    for Arg in "$@"; do
        case "${Arg}" in
            -a|--admin) local Admin=true; shift ;;
            -c=*|--company=*) local Company="${Arg#*=}"; shift ;;
            -d=*|--days=*) local Days="${Arg#*=}"; shift ;;
            -s=*|--server=*) local Server="${Arg#*=}"; shift ;;
            -p=*|--port=*) local Port="${Arg#*=}"; shift ;;
            -C=*|--cluster=*) local Cluster="${Arg#*=}"; shift ;;
                 --ca-cert=*) local CaCert="${Arg#*=}"; shift ;;
                 --ca-cert-key=*) local CaCertKey="${Arg#*=}"; shift ;;
            *=*) >&2 echo "Unknown argument: ${Arg%=*}"; exit 2 ;;
            *) >&2 echo "Unknown argument: ${Arg}"; exit 2 ;;
        esac
    done

    log "Creating user ${UserName}..."

    Admin="${Admin:-false}"
    Company="${Company:-Kubernetes}"
    Days="${Days:-365}"
    Namespace="${Namespace:-default}"
    Server="${Server:-k8s.$(cluster_name)}"
    Port="${Port:-6443}"
    Cluster="${Cluster:-$(cluster_name)}"
    CaCert="${CaCert:-$(ca_cert)}"
    CaCertKey="${CaCertKey:-$(ca_cert_key)}"

    create_cert_key "${UserName}"
    create_cert "${UserName}" "${Company}"
    sign_cert "${UserName}" "${Days}" "${CaCert}" "${CaCertKey}"
    create_kubeconfig "${UserName}" "${Namespace}" \
                      "${Server}" "${Port}" "${Cluster}" "${CaCert}"
    delete_cert "${UserName}"
    delete_cert_key "${UserName}"

    if "${Admin}"; then create_admin_binding "${UserName}"; fi
}
function delete_user {
    local UserName="$1"
    shift

    log "Deleting user ${UserName}..."
    delete_admin_binding "${UserName}"
}

function create_cert_key {
    local UserName="$1"
    openssl genrsa -out "${UserName}.key" 2048
}
function delete_cert_key {
    local UserName="$1"
    rm "${UserName}.key"
}
function create_cert {
    local UserName="$1"
    local Company="$2"

    openssl req -new \
                -key "${UserName}.key" \
                -out "${UserName}.crt" \
                -subj "/CN=${UserName}/O=${Company}"
}
function sign_cert {
    local UserName="$1"
    local Days="$2"
    local CaCert="$3"
    local CaCertKey="$4"

    sudo openssl x509 -req \
                      -in "${UserName}.crt" \
                      -CA "${CaCert}" \
                      -CAkey "${CaCertKey}" \
                      -CAcreateserial \
                      -out "${UserName}.pem" \
                      -days "${Days}"
}
function delete_cert {
    local UserName="$1"
    rm "${UserName}.crt"
    rm "${UserName}.pem"
}

function create_kubeconfig {
    local UserName="$1"
    local Namespace="$2"
    local Server="$3"
    local Port="$4"
    local Cluster="$5"
    local CaCert="$6"
    local Kubeconfig="${UserName}.conf"

    /opt/bin/kubectl config set-cluster "${Cluster}" \
        --kubeconfig="${Kubeconfig}" \
        --server="$(server_endpoint "${Server}" "${Port}")" \
        --certificate-authority="${CaCert}" \
        --embed-certs=true
    
    /opt/bin/kubectl config set-credentials "${UserName}-${Cluster}" \
        --kubeconfig="${Kubeconfig}" \
        --client-certificate="${UserName}.pem" \
        --client-key="${UserName}.key" \
        --embed-certs=true
    
    /opt/bin/kubectl config set-context "${UserName}-${Cluster}" \
        --kubeconfig="${Kubeconfig}" \
        --cluster="${Cluster}" \
        --user="${UserName}-${Cluster}" \
        --namespace="${Namespace}"
    
    /opt/bin/kubectl config use-context "${UserName}-${Cluster}" \
        --kubeconfig="${Kubeconfig}"
}
function create_admin_binding {
    admin_binding apply "$@"
}
function delete_admin_binding {
    admin_binding delete "$@"
}
function admin_binding {
    local Action="$1"
    local UserName="$2"

    sudo sed -e "s/_USERNAME_/${UserName}/g" \
             "$(templates)/user-admin-crb.yaml" | \
         kubectl "${Action}" --filename -
}

function server_endpoint {
    local Server="$1"
    local Port="$2"
    echo "https://${Server}:${Port}"
}

main "$@"
